{
    "_id": {
        "$oid": "5967ff107c3a886e1f7bebb1"
    },
    "filepath": "/../../files/ipynb/5967ff107c3a886e1f7bebb1.ipynb",
    "notebook": "/../../files/html/5967ff107c3a886e1f7bebb1.html",
    "fileName": "aiyagari_continuous_time.ipynb",
    "flagged": false,
    "deleted": false,
    "lastUpdated": {
        "$date": "2017-07-13T23:15:28.472+0000"
    },
    "published": {
        "$date": "2017-07-13T23:15:28.472+0000"
    },
    "views": 0,
    "score": 0,
    "totalComments": 0,
    "author": {
        "$oid": "5967fe8f7c3a886e1f7bebb0"
    },
    "summary": "The material in this notebook is based on [Achdou et al. (2015) \"Heterogeneous Agent Models in Continuous Time\"](http://www.princeton.edu/~moll/HACT.pdf) and follows closely the material in the paper's [online Appendix](http://www.princeton.edu/~moll/HACTproject/HACT_Numerical_Appendix.pdf). Additional codes (mainly in MATLAB) can be found [here](http://www.princeton.edu/~moll/HACTproject.htm). The code and its performance should be compared to [QuantEcon's discrete-time version of the Aiyagari model](http://quant-econ.net/py/aiyagari.html). The structure of the code in the present notebook is purposely kept as close as possible to that of the discrete-time code. The continuous-time code is considerably faster.",
    "lang": "Python",
    "title": "Aiyagari (1994) in Continuous Time",
    "comments": [],
    "coAuthors": [],
    "topicList": ["Mathematical and Quantitative Methods", "Macroeconomics and Monetary Economics"],
    "__v": 0
} {
    "_id": {
        "$oid": "5967ff477c3a886e1f7bebb2"
    },
    "filepath": "/../../files/ipynb/5967ff477c3a886e1f7bebb2.ipynb",
    "notebook": "/../../files/html/5967ff477c3a886e1f7bebb2.html",
    "fileName": "chase_nelder_mead.ipynb",
    "flagged": false,
    "deleted": false,
    "lastUpdated": {
        "$date": "2017-07-13T23:16:23.168+0000"
    },
    "published": {
        "$date": "2017-07-13T23:16:23.168+0000"
    },
    "views": 0,
    "score": 1,
    "totalComments": 0,
    "author": {
        "$oid": "5967fe8f7c3a886e1f7bebb0"
    },
    "summary": "One of the most used optimization algorithms of today is the Nelder-Mead algorithm.  It has become a core muscle in many programming languages' minimization techniques, including being the default for both Matlab and Scipy's `fmin` function.  One of its key benefits is that it requires no information about first or second derivatives.  The Nelder-Mead algorithm searches for the minimum value of an objective function map $f : \\mathbb{R}^{n} \\rightarrow \\mathbb{R}$ by applying simple operations to a simplex of $n+1$ points in $\\mathbb{R}^n$.  The algorithm is simple and a basic understanding of it can provide valuable intuition for when it is (and more importantly when it isn't) an appropriate minimization technique.",
    "lang": "Python",
    "title": "# Optimization: An Introduction to the Nelder-Mead Algorithm",
    "comments": [],
    "coAuthors": [],
    "topicList": ["Mathematical and Quantitative Methods", "Macroeconomics and Monetary Economics"],
    "__v": 0
} {
    "_id": {
        "$oid": "5967ffb17c3a886e1f7bebb3"
    },
    "filepath": "/../../files/ipynb/5967ffb17c3a886e1f7bebb3.ipynb",
    "notebook": "/../../files/html/5967ffb17c3a886e1f7bebb3.html",
    "fileName": "game_theory_jl.ipynb",
    "flagged": false,
    "deleted": false,
    "lastUpdated": {
        "$date": "2017-07-13T23:18:09.698+0000"
    },
    "published": {
        "$date": "2017-07-13T23:18:09.698+0000"
    },
    "views": 0,
    "score": 1,
    "totalComments": 0,
    "author": {
        "$oid": "5967fe8f7c3a886e1f7bebb0"
    },
    "summary": "This notebook demonstrates the functionalities of the `Player` and `NormalFormGame` types\r\nin [QuantEcon/Games.jl](https://github.com/QuantEcon/Games.jl).",
    "lang": "Julia",
    "title": "Tools for Game Theory",
    "comments": [],
    "coAuthors": [],
    "topicList": ["Mathematical and Quantitative Methods"],
    "__v": 0
} {
    "_id": {
        "$oid": "5968002a7c3a886e1f7bebb4"
    },
    "filepath": "/../../files/ipynb/5968002a7c3a886e1f7bebb4.ipynb",
    "notebook": "/../../files/html/5968002a7c3a886e1f7bebb4.html",
    "fileName": "ddp_theory_py.ipynb",
    "flagged": false,
    "deleted": false,
    "lastUpdated": {
        "$date": "2017-07-13T23:20:10.666+0000"
    },
    "published": {
        "$date": "2017-07-13T23:20:10.666+0000"
    },
    "views": 0,
    "score": 1,
    "totalComments": 0,
    "author": {
        "$oid": "5967fe8f7c3a886e1f7bebb0"
    },
    "summary": "This notebook demonstrates the functionalities of the ``game_theory`` module in [QuantEcon.py](https://github.com/QuantEcon/QuantEcon.py)",
    "lang": "Python",
    "title": "Tools for Game Theory",
    "comments": [],
    "coAuthors": [],
    "topicList": ["Mathematical and Quantitative Methods"],
    "__v": 0
} {
    "_id": {
        "$oid": "5968007e7c3a886e1f7bebb5"
    },
    "filepath": "/../../files/ipynb/5968007e7c3a886e1f7bebb5.ipynb",
    "notebook": "/../../files/html/5968007e7c3a886e1f7bebb5.html",
    "fileName": "lucas_asset_pricing_model.ipynb",
    "flagged": false,
    "deleted": false,
    "lastUpdated": {
        "$date": "2017-07-13T23:21:34.086+0000"
    },
    "published": {
        "$date": "2017-07-13T23:21:34.086+0000"
    },
    "views": 0,
    "score": 0,
    "totalComments": 0,
    "author": {
        "$oid": "5967fe8f7c3a886e1f7bebb0"
    },
    "summary": "This note describes why and how we modified the computer code of the original <a href=\"https://github.com/QuantEcon/QuantEcon.py/blob/master/quantecon/models/lucastree.py\">lucastree.py</a> module. We briefly reformulate Lucas' asset pricing problem as found in the  <a href=\"http://quant-econ.net/py/lucas_model.html\">lecture notes</a> . Denote by $y$ the fruit of the tree. The fruitâ€™s growth rate follows the process $G(y,z') = y^\\alpha z'$ with $z' \\sim \\log N(0,\\sigma^2)$. The investor has CRRA preferences with curvature parameter $\\gamma$ and discount factor $\\beta$. Following <a href=\"https://www.jstor.org/stable/1913837?seq=1#page_scan_tab_contents\">Lucas (1978)</a> , the pricing function, $p(y)$, solves the functional equation:\r\n\r\n$$ f(y) = h(y) + \\beta \\int_Z f(G(y,z')) Q(dz').$$\r\nwith\r\n\\begin{align*}\r\n   f(y) &= p(y)y^{-\\gamma}, \\\\ \r\n   h(y) &= \\beta \\int_Z \\left( G(y,z') \\right)^{1-\\gamma} Q(dz') = \\beta y^{ (1-\\gamma)\\alpha } \\exp \\left( (1-\\gamma)^2  \\sigma^2/2 \\right).\r\n\\end{align*}",
    "lang": "Python",
    "title": "Lucas Asset Pricing with advanced Approximation Methods",
    "comments": [],
    "coAuthors": [],
    "topicList": ["Mathematical and Quantitative Methods", "Macroeconomics and Monetary Economics"],
    "__v": 0
} {
    "_id": {
        "$oid": "5968019c7c3a886e1f7bebb6"
    },
    "filepath": "/../../files/ipynb/5968019c7c3a886e1f7bebb6.ipynb",
    "notebook": "/../../files/html/5968019c7c3a886e1f7bebb6.html",
    "fileName": "IntroToStan_basics_workflow.ipynb",
    "flagged": false,
    "deleted": false,
    "lastUpdated": {
        "$date": "2017-07-13T23:26:20.907+0000"
    },
    "published": {
        "$date": "2017-07-13T23:26:20.907+0000"
    },
    "views": 0,
    "score": 2,
    "totalComments": 0,
    "author": {
        "$oid": "5967fe8f7c3a886e1f7bebb0"
    },
    "summary": "Stan is a flexible modeling language that makes it straightforward to estimate a very wide range of probability models using Bayesian techniques. There are a few reasons one may want to spend the time to learn Stan: \r\n\r\nBy the end of this tutorial, you should feel comfortable with the following: \r\n\r\n1. Understand the Bayesian workflow \r\n2. Know how to write out a Stan model\r\n3. Know how to estimate and check a model in R\r\n4. Know where to get help",
    "lang": "R",
    "title": "A quick-start introduction to Stan for economists",
    "comments": [],
    "coAuthors": [],
    "topicList": ["Mathematical and Quantitative Methods"],
    "__v": 0
}